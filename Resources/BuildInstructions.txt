Generic GNU/Linux (static linking)
==================================

# mkdir Build
# cd Build
# cmake .. -DCMAKE_BUILD_TYPE=Debug -DSTATIC_BUILD=ON
# make


Debian Sid (dynamic linking)
============================

# sudo apt-get install build-essential unzip cmake libjpeg-dev \
                       uuid-dev libgtest-dev libpng-dev libsqlite3-dev \
                       zlib1g-dev libboost-all-dev libjsoncpp-dev 

# mkdir Build
# cd Build
# cmake .. -DCMAKE_BUILD_TYPE=Debug -DUSE_GOOGLE_TEST_DEBIAN_PACKAGE=ON -DUSE_SYSTEM_ORTHANC_SDK=OFF
# make


Cross-compiling for Windows from GNU/Linux using MinGW
======================================================

# mkdir Build
# cd Build
# cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=`pwd`/../Orthanc/Resources/MinGWToolchain.cmake
# make


Building on Universal binary for Apple (Intel + Apple Silicon)
==============================================================

The current CMake does not allow building a single universal binary at once -> you must build for each architecture
separately and merge the binaries:

# mkdir build-arm64
# cd build-arm64
# cmake .. -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_OSX_ARCHITECTURES="arm64" -DALLOW_DOWNLOADS=ON -DCMAKE_BUILD_TYPE:STRING=Release -DSTATIC_BUILD=ON -DCMAKE_C_FLAGS="-Wno-implicit-function-declaration"
# make

# mkdir build-amd64
# cd build-amd64
# cmake .. -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_OSX_ARCHITECTURES="amd64" -DALLOW_DOWNLOADS=ON -DCMAKE_BUILD_TYPE:STRING=Release -DSTATIC_BUILD=ON -DCMAKE_C_FLAGS="-Wno-implicit-function-declaration"
# make

# lipo -create -output build/libOrthancGdcm.dylib build-amd64/libOrthancGdcm.dylib build-arm64/libOrthancGdcm.dylib 



